---

- name: install dependencies
  apt:
    name: "{{ dependencies.encryption }}"
    state: latest
    update_cache: no # skip cache check since we already ran apt

- name: add dependencies to install list
  set_fact:
    install_packages: "{{ install_packages + dependencies['encryption'] }}"

- name: fetch cryptsetup version
  command: "cryptsetup --version"
  changed_when: no
  register: _cryptsetup_version

- name: register version
  set_fact:
    cryptsetup_version: "{{ _cryptsetup_version.stdout[11:] }}"

- block:
  - name: set encryption targets (partition)
    set_fact:
      _encrypt_targets: "{{ _encrypt_targets|default({})|combine({item.key: item.value}) }}"
    no_log: true
    with_dict: "{{ _tgt_devices }}"
    when: item.value['encrypt']|default(False)

  - name: create encrypted devices (LUKS2)
    command: >
      cryptsetup -q --cipher {{ item.value['cipher']|default('aes-xts-plain64') }}
      --type {{ item.value['luks-type']|default('luks2') }} --sector-size {{ item.value['luks-sector-size']|default(4096) }}
      --key-size {{ item.value['key-size']|default('256') }}  --hash {{ item.value['hash']|default('sha512') }}
      --iter-time {{ item.value['iter-time']|default('5000') }} luksFormat {{ item.key }}
    args:
      stdin: "{{ item.value['passphrase'] }}"
    no_log: true
    loop_control:
      label: "{{ item.key }}"
    with_dict: "{{ _encrypt_targets|default({}) }}"
    when:
    - cryptsetup_version[0]|int >= 2

  - name: create encrypted devices (LUKS1)
    command: >
      cryptsetup -q --cipher {{ item.value['cipher']|default('aes-xts-plain64') }}
      --type {{ item.value['luks-type']|default('luks') }}
      --key-size {{ item.value['key-size']|default('256') }}  --hash {{ item.value['hash']|default('sha512') }}
      --iter-time {{ item.value['iter-time']|default('5000') }} luksFormat {{ item.key }}
    args:
      stdin: "{{ item.value['passphrase'] }}"
    no_log: true
    loop_control:
      label: "{{ item.key }}"
    with_dict: "{{ _encrypt_targets|default({}) }}"
    when:
    - cryptsetup_version[0]|int < 2

  - name: fetch luks UUID for device
    command: "cryptsetup luksUUID {{ item.key }}"
    no_log: true
    register: _luksuuid
    with_dict: "{{ _encrypt_targets|default({}) }}"

  - name: store data for target devices
    set_fact:
      _tgt_devices: >
        {{ _tgt_devices|combine({'/dev/mapper/' +  item.item.value['target']:
        item.item.value|combine({'luksuuid': item.stdout, 'encrypt': None,
        'passphrase': None, 'target': None, 'use_dev': True})}) }}
    no_log: true
    with_items: "{{ _luksuuid.results }}"

  - name: open luks Devices
    command: >
      cryptsetup -q luksOpen --allow-discards {{ item.key }} {{ item.value['target'] }}
    args:
      stdin: "{{ item.value['passphrase'] }}"
    loop_control:
      label: "{{ item.key }}"
    with_dict: "{{ _encrypt_targets|default({}) }}"
    register: _luksopen

  rescue:
  - include_tasks: cleanup.yml
  - include_tasks: wipe.yml
  - fail:
      msg: "Setting up Encryption failed"
