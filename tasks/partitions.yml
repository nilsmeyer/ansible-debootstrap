---
- name: set uuids
  set_fact:
    _partuuids: >-
      {%- if "nvme" in item.0.device -%}
      {%- set __devname=item.0.device + 'p' + item.1.num|string -%}
      {%- else %}
      {%- set __devname=item.0.device + item.1.num|string -%}
      {%- endif %}
      {%- set element={__devname: 2147483647|random()|to_uuid()} -%}
      {{ _partuuids|default({})|combine(element) }}
  with_subelements:
    - "{{ layout }}"
    - partitions
    - "{{ {'skip_missing': True} }}"

- name: debug uuids
  debug:
    var: _partuuids

# Partitions are stored in ansible facts, however this only seems to work
# for some devices.
- name: check if device is already partitioned
  command: "lsblk -b -nJ -O {{ _target_devices|join(' ') }}"
  changed_when: False
  register: _lsblk

- name: set helper for blockdevices
  set_fact:
    block_devices: "{{ (_lsblk.stdout|from_json)['blockdevices'] }}"

- name: check for partitions on target_device
  set_fact:
    _devices_used: "{{ _devices_used + [item['name']] }}"
  with_items: "{{ block_devices }}"
  when: item['children'] is defined

- fail:
    msg: "Device(s) already contain partitions: {{ _devices_used|join(', ') }}"
  when: "_devices_used|length() > 0"

- name: Create Partitions
  command: >
    sgdisk
    {%- for partition in item.partitions -%}
    {%- set __devname=item.device + ('p' if 'nvme' in item.device else '') + partition.num|string -%}
    {%- if 'size' not in partition -%}
      {#- The size in sectors -#}
      {%- set size = (item.last_usable_sector_s|int - item.offset_s|int - (item.partitions|selectattr('size','defined')|map(attribute='size')|map('f_2sectors')|list|sum)) * item.lbsz_b|int // 4096 * 4096 / item.lbsz_b|int -%}
      {%- set partition = partition|combine({'size': size|string})-%}
    {%- endif %}
    -n {{ partition.num }}:0:{% if partition.size is defined and partition.size[0] != '+'%}+{%endif%}{{ partition.size|default(0) }}
    -t {{ partition.num }}:{{ partition.type|default('8200') }}
    -u {{ partition.num }}:{{ _partuuids[__devname] }}
    {% if 'label' in partition or 'partlabel' in partition %}
    -c {{ partition.num }}:{{ partition.partlabel|default(partition.label) }}
    {%- endif -%}
    {% endfor %} {{ item.device }}
  with_items: "{{ layout_w_attrs }}"

- name: find devices for partuuid
  command: "blkid -l -o device -t PARTUUID='{{ item.value }}'"
  register: _blkid
  with_dict: "{{ _partuuids }}"

- name: store real device for uuid
  set_fact:
    _tgt_devices: "{{ _tgt_devices|default({})|combine({item.stdout: {'partuuid': item.item.value }}) }}"
  with_items: "{{ _blkid.results }}"

- debug:
    var: layout_w_attrs
    verbosity: 2

- debug:
    var: _tgt_devices
    verbosity: 2

- name: debug tgt_devices
  debug:
    msg: >-
      {% if "nvme" in item.0.device %}
      {% set __devname=item.0.device + 'p' + item.1.num|string %}
      {% else %}
      {% set __devname=item.0.device + item.1.num|string %}
      {% endif %}
      {{ _tgt_devices[__devname] }}
  with_subelements:
    - "{{ layout }}"
    - partitions
    - "{{ {'skip_missing': True} }}"

- name: enrich partition data
  set_fact:
    _tgt_devices: >-
      {%- if "nvme" in item.0.device -%}
      {%- set __devname=item.0.device + 'p' + item.1.num|string -%}
      {%- else -%}
      {%- set __devname=item.0.device + item.1.num|string -%}
      {%- endif -%}
      {{
      _tgt_devices|combine({__devname:
      _tgt_devices[__devname]|combine(item.1)})
      }}
  with_subelements:
    - "{{ layout }}"
    - partitions
    - "{{ {'skip_missing': True} }}"

